start project
>python manage.py startproject django_forms
start app
>python manage.py startapp form_app


1)
register app in installed app of settings.py
go to project url
include the url of the app using form_app.urls (name of the app you created.urls)
url('',include('form_app.urls')),
this is done so that if we include any path/url in our app then it gets automatically called in our project too using form_app.urls


2)
then go to our app url.py here form_app
create paths in urls.py
url('',views.contact),
and make sure to import views
from . import views

3)
now we can go to views.py file nd create contact view in there
from django.shortcuts import render
from django.http import HttpResponse
# Create your views here.
def contact(request):
    return HttpResponse('contact view')

4)now make migrations
>python manage.py makemigrations
>python manage.py migrate

				*******     Contact Us Form    *************

				now we are going to make our first form
				this will be very simple contact form that will going to
				catch the value as soon the user wants to contact us
r

5)go to your app here form_app and create a file forms.py

)import forms
)create form using class (having the subclass forms.Form)
)create fields you want (method is similar to as you crated in models)

##in forms.py
from django import forms
class ContactForm(forms.Form):
        name=forms.charField()
        email=forms.EmailField(Label='E-mail')
        category=forms.ChoiceField(choices=[('question','Question'),('other','Other')])#array of tupples
        subject=forms.CharField(required=False)
        body=forms.CharField(widget=form.Textarea)#widgests are used to represent actual html representation of a vield #by default widget is text input therefore we write widget here to make it large i.e textarea not textinput


6)go to views.py
)and import the form that we created i.e ContactForm

from .forms import ContactForm

)now we will create a variable to store our form

form=ContactForm()

)now we want to return the template and form instead of httpresponse

return render(request, 'form.html', {'forms_11':form})#form.html is a template and form is the same variable that we created above

this forms_11 can be any variable that we can use in html template to display our form

7)create templates
now we have to create a folder called templates in our app (form_app)
we have to create a form.html in templates folder

and inside the html template inside body call {{forms_11}} #this forms is basicall name of the form variable that we used for render in views.py
i.e  
 return render(request, 'form.html', {'forms_11':form})


***and you can run the server to see the basic form created there

)in django we don't get form tag manually so we have to create it

8)go to form.html
and create form tag with method=post
add csrf token
add button with type=submit

till now we created a simple form now we have to look form data to fill


^there rae two types of form:-
a)unbound form :- that doesnt have any data
b)bound form :- that contains data  to play with
till now our form is unbound now we will make it bound


9)now we want to populate our form with data submited by user
if request.method='POST':
        form=ContactForm(request.POST)#since the method of form is post check in form.html


to populate our form with data we also have to check that the data entered by user is valid or not using form.is.valid() method
and if the data entered by user is valid then we have to snatch the data using form.cleaned_data method
if form.is.valid():
            name=form.cleaned_data['name']

;;;;;;;;;;;;;;;;;code:views.py;;;;;;;;;;;;
# Create your views here.
def contact(request):
    if request.method=='POST':
        form=ContactForm(request.POST)#this will populate our form with the data submitted by user
        if form.is_valid():
            name=form.cleaned_data['name']
            name=form.cleaned_data['email']
            print(name,email)#f
    form=ContactForm()
    #return HttpResponse('contact view') it was earlier when we dont have template
    return render(request, 'form.html', {'forms_11':form})


10)
and in the form.html remember to change the action to method 
	
  <form action="post"> replace action with method
<form method="post">

11)now run the server
fill the details and submit it

and look back into the teminal 
we can see the name and email in get request 

>Quit the server with CONTROL-C.
[17/Apr/2019 11:57:45] "GET /post?csrfmiddlewaretoken=jxIznhIg91OXBOSVj2Pa53ycX5Pdw3GWjwjyjqQRKZGZEiuwiKb4mfcI5arBfhxO&name=shrutika&email=sh%40gmail.com&cat
 
and we can also try saving thesRMes data to database




*******************************MODEL FORMS*******
11)MODEL FORMS
Model Form is quite useful since we simply call a method and it takes care of automatically saving the model to the database instead of we manually doing it


12)so head over to models .py file




























